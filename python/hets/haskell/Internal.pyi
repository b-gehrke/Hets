""" Auto generated python stubs for haskell module ../HetsAPI/Internal.hs"""

import typing
from .Prelude import *

a = typing.TypeVar("a")

class DGNodeLab:
    def getNodeConsStatus(self) -> ConsStatus: ...

    ...


class DGLinkLab:
    ...


class ConsStatus:
    def isProvenConsStatusLink(self) -> bool: ...

    def requiredConservativity(self) -> Conservativity: ...

    def provenConservativity(self) -> Conservativity: ...

    ...

class Conservativity: ...
class DGraph: ...

class GlobalAnnos: ...


def developmentGraphNodeLabelName(x0: DGNodeLab) -> str: ...


def developmentGraphEdgeLabelName(x0: DGLinkLab) -> str: ...

def developmentGraphEdgeLabelId(x0: DGLinkLab) -> int: ...


def globalAnnotations(x0: DGraph) -> GlobalAnnos: ...


def precedenceAnnotations(x0: GlobalAnnos) -> object: ...


def associativityAnnotations(x0: GlobalAnnos) -> object: ...


def displayAnnos(x0: GlobalAnnos) -> object: ...


def literalAnnos(x0: GlobalAnnos) -> object: ...


def prefixMap(x0: GlobalAnnos) -> object: ...


class Result(typing.Generic[a]):
    def diags(self) -> typing.List[typing.Any]: ...


def resultToMaybe(r: Result[a]) -> Maybe[a]: ...



class GoalStatus: ...

class Open(GoalStatus):
    def goalStatusOpenReason(self) -> typing.List[str]: ...

class Disproved(GoalStatus): ...

class Proved(GoalStatus): ...



class TimeOfDay: ...


class TacticScript: ...

def tacticScriptContent(x0: TacticScript) -> str: ...

class ConsistencyStatus: ...


class LibName: ...


class LibEnv: ...

class ProofStatus(typing.Generic[a]):
    def goalName(self) -> str: ...

    def goalStatus(self) -> GoalStatus: ...

    def usedAxioms(self) -> typing.List[str]: ...

    def usedProver(self) -> str: ...

    def proofTree(self) -> a: ...

    def usedTime(self) -> TimeOfDay: ...

    def tacticScript(self) -> TacticScript: ...

    def proofLines(self) -> typing.List[str]: ...


class ExtSign(typing.Generic[a, b]):
    def plainSign(self): ...

    def nonImportedSymbols(self): ...

def showConsistencyStatus(c: Conservativity) -> str: ...

def fromJust(m: Maybe[a]) -> a: ...

class ProofState: ...

class Diagnosis: ...


def getLNodesFromDevelopmentGraph(g: DGraph) -> typing.List[typing.Tuple[int, DGNodeLab]]: ...


def getEdgesFromDevelopmentGraph(g: DGraph) -> typing.List[DGLinkLab]: ...


def getLEdgesFromDevelopmentGraph(g: DGraph) -> typing.List[typing.Tuple[int, int, DGLinkLab]]: ...

class HetcatsOpts: ...

defaultHetcatsOpts: HetcatsOpts

def optsWithUrlCatalog(x0: HetcatsOpts, x1: typing.List[typing.Tuple[str, str]]) -> HetcatsOpts: ...
def optsWithInfiles(x0: HetcatsOpts, x1: typing.List[str]) -> HetcatsOpts: ...
def optsWithSpecNames(x0: HetcatsOpts, x1: typing.List[typing.Any]) -> HetcatsOpts: ...
def optsWithTransNames(x0: HetcatsOpts, x1: typing.List[typing.Any]) -> HetcatsOpts: ...
def optsWithLossyTrans(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...                
def optsWithViewNames(x0: HetcatsOpts, x1: typing.List[typing.Any]) -> HetcatsOpts: ...
def optsWithLibdirs(x0: HetcatsOpts, x1: typing.List[str]) -> HetcatsOpts: ...
def optsWithModelSparQ(x0: HetcatsOpts, x1: str) -> HetcatsOpts: ...
def optsWithCounterSparQ(x0: HetcatsOpts, x1: int) -> HetcatsOpts: ...
def optsWithOutdir(x0: HetcatsOpts, x1: str) -> HetcatsOpts: ...
def optsWithDatabaseDoMigrate(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithDatabaseOutputFile(x0: HetcatsOpts, x1: str) -> HetcatsOpts: ...
def optsWithDatabaseConfigFile(x0: HetcatsOpts, x1: str) -> HetcatsOpts: ...
def optsWithDatabaseSubConfigKey(x0: HetcatsOpts, x1: str) -> HetcatsOpts: ...
def optsWithDatabaseFileVersionId(x0: HetcatsOpts, x1: str) -> HetcatsOpts: ...
def optsWithDatabaseReanalyze(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithXupdate(x0: HetcatsOpts, x1: str) -> HetcatsOpts: ...
def optsWithRecurse(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithVerbose(x0: HetcatsOpts, x1: int) -> HetcatsOpts: ...
def optsWithDefLogic(x0: HetcatsOpts, x1: str) -> HetcatsOpts: ...
def optsWithDefSyntax(x0: HetcatsOpts, x1: str) -> HetcatsOpts: ...
def optsWithOutputToStdout(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithInteractive(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithConnectP(x0: HetcatsOpts, x1: int) -> HetcatsOpts: ...
def optsWithConnectH(x0: HetcatsOpts, x1: str) -> HetcatsOpts: ...
def optsWithUncolored(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithXmlFlag(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithApplyAutomatic(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithComputeNormalForm(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithDumpOpts(x0: HetcatsOpts, x1: typing.List[str]) -> HetcatsOpts: ...
def optsWithDisableCertificateVerification(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithUseLibPos(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithUnlit(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithServe(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithListen(x0: HetcatsOpts, x1: int) -> HetcatsOpts: ...
def optsWithPidFile(x0: HetcatsOpts, x1: str) -> HetcatsOpts: ...
def optsWithWhitelist(x0: HetcatsOpts, x1: typing.List[typing.List[str]]) -> HetcatsOpts: ...
def optsWithBlacklist(x0: HetcatsOpts, x1: typing.List[typing.List[str]]) -> HetcatsOpts: ...
def optsWithRunMMT(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithFullTheories(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithOutputLogicList(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithOutputLogicGraph(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithFileType(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithAccessToken(x0: HetcatsOpts, x1: str) -> HetcatsOpts: ...
def optsWithHttpRequestHeaders(x0: HetcatsOpts, x1: typing.List[str]) -> HetcatsOpts: ...
def optsWithFullSign(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...
def optsWithPrintAST(x0: HetcatsOpts, x1: bool) -> HetcatsOpts: ...

def isInternalNode(x0: DGNodeLab) -> bool: ...



class DGNodeType: ...

def nodeTypeIsReference(x0: DGNodeType) -> bool: ...

def nodeTypeIsProven(x0: DGNodeType) -> bool: ...

def nodeTypeIsProvenConsistent(x0: DGNodeType) -> bool: ...

class DevGraphLinkKind: ...
class LinkKindGlobal(DevGraphLinkKind): ...
class LinkKindLocal(DevGraphLinkKind): ...
class LinkKindHiding(DevGraphLinkKind): ...
class LinkKindFree(DevGraphLinkKind): ...
class LinkKindCofree(DevGraphLinkKind): ...

class DevGraphLinkType:
    def linkTypeKind(self) -> DevGraphLinkKind: ...
    def linkTypeIsInclusion(self) -> bool: ...
    def linkTypeIsHomogenoeous(self) -> bool: ...

class DefinitionLink(DevGraphLinkType): ...

class TheoremLink(DevGraphLinkType):
    def linkTypeIsProven(self) -> bool: ...
    def linkTypeIsConservativ(self) -> bool: ...
    def linkTypeIsPending(self) -> bool: ...


def getDevGraphLinkType(x0: DGLinkLab) -> DevGraphLinkType: ...

def showGlobalDoc(x0: GlobalAnnos, x1: typing.Any, x2: str) -> str: ...

def showDoc(x0: typing.Any, x2: str) -> str: ...


