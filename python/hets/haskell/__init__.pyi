from typing import Any, Tuple, TypeVar, Generic, List, Callable

from .OMap import OMap

A = TypeVar("A")
B = TypeVar("B")
C = TypeVar("C")


class Maybe(Generic[A]): ...


class Result(Generic[A]):
    def diags(self) -> List[Any]: ...


class IO(Generic[A]):
    def act(self) -> A: ...


def fst(tuple: Tuple[A, B]) -> A: ...


def fstOf3(tuple: Tuple[A, B, C]) -> A: ...


def snd(tuple: Tuple[A, B]) -> B: ...


def sndOf3(tuple: Tuple[A, B, C]) -> B: ...


def thd(tuple: Tuple[A, B, C]) -> C: ...


def show(x: Any) -> str: ...


class Just(Maybe[A]):
    def __init__(self, x: A): ...


class Nothing(Maybe[A]):
    def __init__(self): ...


def resultToMaybe(r: Result[A]) -> Maybe[A]: ...


class PyTheory: ...


class PyProver: ...


class PyConsChecker: ...


class PyComorphism: ...


class Sentence: ...


class HetcatsOpts: ...


class DGraph: ...


class DGNodeLab: ...


class Diagnosis: ...


class ProofState:
    ...

    def selectedGoals(self) -> List[str]: ...

    def includedAxioms(self) -> List[str]: ...

    def includedTheorems(self) -> List[str]: ...

    def accDiags(self) -> List[Diagnosis]: ...

    def selectedProver(self) -> str: ...

    def selectedConsChecker(self) -> str: ...


class ProofTree: ...


class GoalStatus: ...


class TimeOfDay: ...


class TacticScript: ...


class ProofStatus(Generic[A]):
    def goalName(self) -> str: ...

    def goalStatus(self) -> GoalStatus: ...

    def usedAxioms(self) -> List[str]: ...

    def usedProver(self) -> str: ...

    def proofTree(self) -> A: ...

    def usedTime(self) -> TimeOfDay: ...

    def tacticScript(self) -> TacticScript: ...

    def proofLines(self) -> List[str]: ...


class ConsistencyStatus: ...


def autoProveNode(t: PyTheory, p: Maybe[PyProver], c: Maybe[PyComorphism]) -> IO[
    Result[Tuple[PyTheory, ProofState, List[ProofTree]]]]: ...


def availableComorphisms(t: PyTheory) -> List[PyComorphism]: ...


def getLNodesFromDevelopmentGraph(g: DGraph) -> List[Tuple[int, DGNodeLab]]: ...


def getTheoryFromNode(n: DGNodeLab) -> PyTheory: ...


def usableConsistencyCheckers(t: PyTheory) -> IO[List[Tuple[PyConsChecker, PyComorphism]]]: ...


def usableProvers(t: PyTheory) -> IO[List[Tuple[PyProver, PyComorphism]]]: ...


def prettySentence(t: PyTheory) -> Callable[[Sentence], str]: ...


def autoCheckConsistency(n: LibName, e: LibEnv) -> Callable[[DGraph], Callable[[Tuple[int, DGNodeLab]], Callable[
    [int], Callable[[bool, Maybe[PyConsChecker], Maybe[PyComorphism]], IO[ConsistencyStatus]]]]]: ...


def getAllSentences(t: PyTheory) -> OMap[str, Sentence]: ...


def getAllAxioms(t: PyTheory) -> OMap[str, Sentence]: ...


def getAllGoals(t: PyTheory) -> OMap[str, Sentence]: ...


def getProvenGoals(t: PyTheory) -> OMap[str, Sentence]: ...


def getUnprovenGoals(t: PyTheory) -> OMap[str, Sentence]: ...


def getProverName(p: PyProver) -> str: ...


def getComorphismName(c: PyComorphism) -> str: ...


def getConsCheckerName(c: PyConsChecker) -> str: ...


def loadLibrary(path: str, opts: HetcatsOpts) -> IO[Result[Tuple[LibName, LibEnv]]]: ...


def getGraphForLibrary(n: LibName, e: LibEnv) -> DGraph: ...


def resultToMaybe() -> Any: ...


def defaultHetcatsOpts() -> HetcatsOpts: ...


def fromJust(m: Maybe[A]) -> A: ...


# Library
class LibName: ...


class LibEnv: ...


def automatic(name: LibName, env: LibEnv) -> LibEnv: ...


def globalSubsume(name: LibName, env: LibEnv) -> LibEnv: ...


def globalDecomposition(name: LibName, env: LibEnv) -> LibEnv: ...


def localInference(name: LibName, env: LibEnv) -> LibEnv: ...


def localDecomposition(name: LibName, env: LibEnv) -> LibEnv: ...


def compositionProveEdges(name: LibName, env: LibEnv) -> LibEnv: ...


def conservativity(name: LibName, env: LibEnv) -> LibEnv: ...


def automaticHideTheoremShift(name: LibName, env: LibEnv) -> LibEnv: ...


def theoremHideShift(name: LibName, env: LibEnv) -> LibEnv: ...


def computeColimit(name: LibName, env: LibEnv) -> LibEnv: ...


def normalForm(name: LibName, env: LibEnv) -> LibEnv: ...


def triangleCons(name: LibName, env: LibEnv) -> LibEnv: ...


def freeness(name: LibName, env: LibEnv) -> LibEnv: ...


def libFlatImports(name: LibName, env: LibEnv) -> LibEnv: ...


def libFlatDUnions(name: LibName, env: LibEnv) -> LibEnv: ...


def libFlatRenamings(name: LibName, env: LibEnv) -> LibEnv: ...


def libFlatHiding(name: LibName, env: LibEnv) -> LibEnv: ...


def libFlatHeterogen(name: LibName, env: LibEnv) -> LibEnv: ...


def qualifyLibEnv(name: LibName, env: LibEnv) -> LibEnv: ...
